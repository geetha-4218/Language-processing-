import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords

# Load dataset
def load_data():
    # Replace with your own dataset path or use a public dataset
    # For demonstration, using a sample CSV format: 'text', 'label'
    url = "https://raw.githubusercontent.com/clmentpb/fake-and-real-news-dataset/master/fake_or_real_news.csv"
    df = pd.read_csv(url)
    return df['text'], df['label']

# Preprocess text data
def preprocess(texts):
    stop_words = set(stopwords.words('english'))
    return [" ".join([word for word in doc.lower().split() if word not in stop_words]) for doc in texts]

# Train the model
def train_model(X_train, y_train):
    vectorizer = TfidfVectorizer(max_df=0.7)
    X_train_vec = vectorizer.fit_transform(X_train)
    model = LogisticRegression()
    model.fit(X_train_vec, y_train)
    return model, vectorizer

# Evaluate the model
def evaluate_model(model, vectorizer, X_test, y_test):
    X_test_vec = vectorizer.transform(X_test)
    predictions = model.predict(X_test_vec)
    print("Accuracy:", accuracy_score(y_test, predictions))
    print("Classification Report:\n", classification_report(y_test, predictions))

# Predict new article
def predict_fake_news(model, vectorizer, text):
    text = preprocess([text])
    text_vec = vectorizer.transform(text)
    prediction = model.predict(text_vec)[0]
    return prediction

# Main function
def main():
    print("Loading data...")
    X, y = load_data()
    X = preprocess(X)
    X_train, X_test, y_train, y_test = train_test_split(X,
